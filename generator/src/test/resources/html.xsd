<!--
  Copyright (c) 2006 JAX-SB

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  You should have received a copy of The MIT License (MIT) along with this
  program. If not, see <http://opensource.org/licenses/MIT/>.
-->
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.jaxsb.org/generator/html.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:html="http://www.jaxsb.org/generator/html.xsd">

  <!--xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://schemas.geneabase.com/w3c/namespace.xsd"/-->

  <xs:simpleType name="ContentType">
    <xs:annotation>
      <xs:documentation>media type, as per [RFC2045]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="ContentTypes">
    <xs:annotation>
      <xs:documentation>comma-separated list of media types, as per [RFC2045]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="Charset">
    <xs:annotation>
      <xs:documentation>a character encoding, as per [RFC2045]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="Charsets">
    <xs:annotation>
      <xs:documentation>a space separated list of character encodings, as per [RFC2045]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="LanguageCode">
    <xs:annotation>
      <xs:documentation>a language code, as per [RFC3066]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:language"/>
  </xs:simpleType>
  <xs:simpleType name="Character">
    <xs:annotation>
      <xs:documentation>a single character, as per section 2.2 of [XML]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:length value="1" fixed="true"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Number">
    <xs:annotation>
      <xs:documentation>one or more digits</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:nonNegativeInteger">
      <xs:pattern value="[0-9]+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="tabindexNumber">
    <xs:annotation>
      <xs:documentation>tabindex attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="html:Number">
      <xs:minInclusive value="0"/>
      <xs:maxInclusive value="32767"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="LinkTypes">
    <xs:annotation>
      <xs:documentation>space-separated list of link types</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKENS"/>
  </xs:simpleType>
  <xs:simpleType name="MediaDesc">
    <xs:annotation>
      <xs:documentation>single or comma-separated list of media descriptors</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[^,]+(,\s*[^,]+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="URI">
    <xs:annotation>
      <xs:documentation>a Uniform Resource Identifier, see [RFC2396]</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI"/>
  </xs:simpleType>
  <xs:simpleType name="UriList">
    <xs:annotation>
      <xs:documentation>a space separated list of Uniform Resource Identifiers</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="Datetime">
    <xs:annotation>
      <xs:documentation>date and time information. ISO date format</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:dateTime"/>
  </xs:simpleType>
  <!--xs:simpleType name="Script">
		<xs:annotation>
			<xs:documentation>script expression</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType-->
  <!--xs:simpleType name="StyleSheet">
		<xs:annotation>
			<xs:documentation>style sheet data</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType-->
  <xs:simpleType name="Text">
    <xs:annotation>
      <xs:documentation>used for titles etc.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="Length">
    <xs:annotation>
      <xs:documentation>nn for pixels or nn% for percentage length</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[-+]?(\d+|\d+(\.\d+)?%)"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MultiLength">
    <xs:annotation>
      <xs:documentation>pixel, percentage, or relative</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[-+]?(\d+|\d+(\.\d+)?%)|[1-9]?(\d+)?\*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Pixels">
    <xs:annotation>
      <xs:documentation>integer representing length in pixels</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:nonNegativeInteger"/>
  </xs:simpleType>
  <!--xs:annotation>
		<xs:documentation>these are used for image maps</xs:documentation>
	</xs:annotation>
	<xs:simpleType name="Shape">
		<xs:restriction base="xs:token">
			<xs:enumeration value="rect"/>
			<xs:enumeration value="circle"/>
			<xs:enumeration value="poly"/>
			<xs:enumeration value="default"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Coords">
		<xs:annotation>
			<xs:documentation>comma separated list of lengths</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[-+]?(\d+|\d+(\.\d+)?%)(,\s*[-+]?(\d+|\d+(\.\d+)?%))*"/>
		</xs:restriction>
	</xs:simpleType-->
  <xs:annotation>
    <xs:documentation>=================== Generic Attributes ===============================</xs:documentation>
  </xs:annotation>
  <xs:attributeGroup name="coreattrs">
    <xs:annotation>
      <xs:documentation>core attributes common to most elements id document-wide unique id class space separated list of classes style associated style info title advisory title/amplification</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="class" type="xs:NMTOKENS"/>
    <!--xs:attribute name="style" type="html:StyleSheet"/-->
    <xs:attribute name="title" type="html:Text"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="i18n">
    <xs:annotation>
      <xs:documentation>internationalization attributes lang language code (backwards compatible) xml:lang language code (as per XML 1.0 spec) dir direction for weak/neutral text</xs:documentation>
    </xs:annotation>
    <xs:attribute name="lang" type="html:LanguageCode"/>
    <!--xs:attribute ref="xml:lang"/-->
    <xs:attribute name="dir">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ltr"/>
          <xs:enumeration value="rtl"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--xs:attributeGroup name="events">
		<xs:annotation>
			<xs:documentation>
        attributes for common UI events
        onclick     a pointer button was clicked
        ondblclick  a pointer button was double clicked
        onmousedown a pointer button was pressed down
        onmouseup   a pointer button was released
        onmousemove a pointer was moved onto the element
        onmouseout  a pointer was moved away from the element
        onkeypress  a key was pressed and released
        onkeydown   a key was pressed down
        onkeyup     a key was released
      </xs:documentation>
		</xs:annotation>
		<xs:attribute name="onclick" type="html:Script"/>
		<xs:attribute name="ondblclick" type="html:Script"/>
		<xs:attribute name="onmousedown" type="html:Script"/>
		<xs:attribute name="onmouseup" type="html:Script"/>
		<xs:attribute name="onmouseover" type="html:Script"/>
		<xs:attribute name="onmousemove" type="html:Script"/>
		<xs:attribute name="onmouseout" type="html:Script"/>
		<xs:attribute name="onkeypress" type="html:Script"/>
		<xs:attribute name="onkeydown" type="html:Script"/>
		<xs:attribute name="onkeyup" type="html:Script"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="focus">
		<xs:annotation>
			<xs:documentation>
        attributes for elements that can get the focus
        accesskey   accessibility key character
        tabindex    position in tabbing order
        onfocus     the element got the focus
        onblur      the element lost the focus
      </xs:documentation>
		</xs:annotation>
		<xs:attribute name="accesskey" type="html:Character"/>
		<xs:attribute name="tabindex" type="html:tabindexNumber"/>
		<xs:attribute name="onfocus" type="html:Script"/>
		<xs:attribute name="onblur" type="html:Script"/>
	</xs:attributeGroup-->
  <xs:attributeGroup name="attrs">
    <xs:attributeGroup ref="html:coreattrs"/>
    <xs:attributeGroup ref="html:i18n"/>
    <!--xs:attributeGroup ref="html:events"/-->
  </xs:attributeGroup>
  <xs:annotation>
    <xs:documentation>=================== Text Elements ====================================</xs:documentation>
  </xs:annotation>
  <xs:group name="special.pre">
    <xs:choice>
      <xs:element ref="html:br"/>
      <xs:element ref="html:span"/>
      <xs:element ref="html:bdo"/>
      <!--xs:element ref="html:map"/-->
    </xs:choice>
  </xs:group>
  <xs:group name="special">
    <xs:choice>
      <xs:group ref="html:special.pre"/>
      <!--xs:element ref="html:object"/>
			<xs:element ref="html:img"/-->
    </xs:choice>
  </xs:group>
  <xs:group name="fontstyle">
    <xs:choice>
      <xs:element ref="html:tt"/>
      <xs:element ref="html:i"/>
      <xs:element ref="html:b"/>
      <xs:element ref="html:big"/>
      <xs:element ref="html:small"/>
    </xs:choice>
  </xs:group>
  <xs:group name="phrase">
    <xs:choice>
      <xs:element ref="html:em"/>
      <xs:element ref="html:strong"/>
      <xs:element ref="html:dfn"/>
      <xs:element ref="html:code"/>
      <xs:element ref="html:q"/>
      <xs:element ref="html:samp"/>
      <xs:element ref="html:kbd"/>
      <xs:element ref="html:var"/>
      <xs:element ref="html:cite"/>
      <xs:element ref="html:abbr"/>
      <xs:element ref="html:acronym"/>
      <xs:element ref="html:sub"/>
      <xs:element ref="html:sup"/>
    </xs:choice>
  </xs:group>
  <!--xs:group name="inline.forms">
		<xs:choice>
			<xs:element ref="html:input"/>
			<xs:element ref="html:select"/>
			<xs:element ref="html:textarea"/>
			<xs:element ref="html:label"/>
			<xs:element ref="html:button"/>
		</xs:choice>
	</xs:group-->
  <!--xs:group name="misc.inline">
		<xs:choice>
			<xs:element ref="html:ins"/>
			<xs:element ref="html:del"/>
			<xs:element ref="html:script"/>
		</xs:choice>
	</xs:group>
	<xs:group name="misc">
		<xs:annotation>
			<xs:documentation>these can only occur at block level</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="html:noscript"/>
			<xs:group ref="html:misc.inline"/>
		</xs:choice>
	</xs:group-->
  <xs:group name="inline">
    <xs:choice>
      <xs:element ref="html:a"/>
      <xs:group ref="html:special"/>
      <xs:group ref="html:fontstyle"/>
      <xs:group ref="html:phrase"/>
      <!--xs:group ref="html:inline.forms"/-->
    </xs:choice>
  </xs:group>
  <xs:complexType name="Inline" mixed="true">
    <xs:annotation>
      <xs:documentation>"Inline" covers inline or "text-level" elements</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="html:inline"/>
      <!--xs:group ref="html:misc.inline"/-->
    </xs:choice>
  </xs:complexType>
  <xs:annotation>
    <xs:documentation>================== Block level elements ==============================</xs:documentation>
  </xs:annotation>
  <xs:group name="heading">
    <xs:choice>
      <xs:element ref="html:h1"/>
      <xs:element ref="html:h2"/>
      <xs:element ref="html:h3"/>
      <xs:element ref="html:h4"/>
      <xs:element ref="html:h5"/>
      <xs:element ref="html:h6"/>
    </xs:choice>
  </xs:group>
  <xs:group name="lists">
    <xs:choice>
      <xs:element ref="html:ul"/>
      <xs:element ref="html:ol"/>
      <xs:element ref="html:dl"/>
    </xs:choice>
  </xs:group>
  <xs:group name="blocktext">
    <xs:choice>
      <xs:element ref="html:pre"/>
      <xs:element ref="html:hr"/>
      <xs:element ref="html:blockquote"/>
      <xs:element ref="html:address"/>
    </xs:choice>
  </xs:group>
  <xs:group name="block">
    <xs:choice>
      <xs:element ref="html:p"/>
      <xs:group ref="html:heading"/>
      <xs:element ref="html:div"/>
      <xs:group ref="html:lists"/>
      <xs:group ref="html:blocktext"/>
      <!--xs:element ref="html:fieldset"/-->
      <xs:element ref="html:table"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="Block">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="html:block"/>
      <!--xs:element ref="html:form"/-->
      <!--xs:group ref="html:misc"/-->
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="Flow" mixed="true">
    <xs:annotation>
      <xs:documentation>"Flow" mixes block and inline and is used for list items etc.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="html:block"/>
      <!--xs:element ref="html:form"/-->
      <xs:group ref="html:inline"/>
      <!--xs:group ref="html:misc"/-->
    </xs:choice>
  </xs:complexType>
  <xs:annotation>
    <xs:documentation>================== Content models for exclusions =====================</xs:documentation>
  </xs:annotation>
  <xs:complexType name="a.content" mixed="true">
    <xs:annotation>
      <xs:documentation>a elements use "Inline" excluding a</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="html:special"/>
      <xs:group ref="html:fontstyle"/>
      <xs:group ref="html:phrase"/>
      <!--xs:group ref="html:inline.forms"/>
			<xs:group ref="html:misc.inline"/-->
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="pre.content" mixed="true">
    <xs:annotation>
      <xs:documentation>pre uses "Inline" excluding big, small, sup or sup</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="html:a"/>
      <xs:group ref="html:fontstyle"/>
      <xs:group ref="html:phrase"/>
      <xs:group ref="html:special.pre"/>
      <!--xs:group ref="html:misc.inline"/>
			<xs:group ref="html:inline.forms"/-->
    </xs:choice>
  </xs:complexType>
  <!--xs:complexType name="form.content">
		<xs:annotation>
			<xs:documentation>form uses "Block" excluding form</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:group ref="html:block"/>
			<xs:group ref="html:misc"/>
		</xs:choice>
	</xs:complexType-->
  <!--xs:complexType name="button.content" mixed="true">
		<xs:annotation>
			<xs:documentation>button uses "Flow" but excludes a, form and form controls</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="html:p"/>
			<xs:group ref="html:heading"/>
			<xs:element ref="html:div"/>
			<xs:group ref="html:lists"/>
			<xs:group ref="html:blocktext"/>
			<xs:element ref="html:table"/>
			<xs:group ref="html:special"/>
			<xs:group ref="html:fontstyle"/>
			<xs:group ref="html:phrase"/>
			<xs:group ref="html:misc"/>
		</xs:choice>
	</xs:complexType-->
  <xs:annotation>
    <xs:documentation>================ Document Structure ==================================</xs:documentation>
  </xs:annotation>
  <!--xs:element name="html">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="html:head"/>
				<xs:element ref="html:body"/>
			</xs:sequence>
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attribute name="id" type="xs:ID"/>
		</xs:complexType>
	</xs:element-->
  <xs:annotation>
    <xs:documentation>================ Document Head =======================================</xs:documentation>
  </xs:annotation>
  <!--xs:group name="head.misc">
		<xs:sequence>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="html:script"/>
				<xs:element ref="html:style"/>
				<xs:element ref="html:meta"/>
				<xs:element ref="html:link"/>
				<xs:element ref="html:object"/>
			</xs:choice>
		</xs:sequence>
	</xs:group-->
  <!--xs:element name="head">
		<xs:annotation>
			<xs:documentation>
        content model is "head.misc" combined with a single
        title and an optional base element in any order
      </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="html:head.misc"/>
				<xs:choice>
					<xs:sequence>
						<xs:element ref="html:title"/>
						<xs:group ref="html:head.misc"/>
						<xs:sequence minOccurs="0">
							<xs:element ref="html:base"/>
							<xs:group ref="html:head.misc"/>
						</xs:sequence>
					</xs:sequence>
					<xs:sequence>
						<xs:element ref="html:base"/>
						<xs:group ref="html:head.misc"/>
						<xs:element ref="html:title"/>
						<xs:group ref="html:head.misc"/>
					</xs:sequence>
				</xs:choice>
			</xs:sequence>
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attribute name="id" type="xs:ID"/>
			<xs:attribute name="profile" type="html:URI"/>
		</xs:complexType>
	</xs:element-->
  <!--xs:element name="title">
		<xs:annotation>
			<xs:documentation>
        The title element is not considered part of the flow of text.
        It should be displayed, for example as the page header or
        window title. Exactly one title is required per document.
      </xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attribute name="id" type="xs:ID"/>
		</xs:complexType>
	</xs:element-->
  <!--xs:element name="base">
		<xs:annotation>
			<xs:documentation>
        document base URI
      </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="href" type="html:URI" use="required"/>
			<xs:attribute name="id" type="xs:ID"/>
		</xs:complexType>
	</xs:element-->
  <!--xs:element name="meta">
		<xs:annotation>
			<xs:documentation>
        generic metainformation
      </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attribute name="id" type="xs:ID"/>
			<xs:attribute name="http-equiv"/>
			<xs:attribute name="name"/>
			<xs:attribute name="content" use="required"/>
			<xs:attribute name="scheme"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="link">
		<xs:annotation>
			<xs:documentation>
        Relationship values can be used in principle:

        a) for document specific toolbars/menus when used
           with the link element in document head e.g.
           start, contents, previous, next, index, end, help
        b) to link to a separate style sheet (rel="stylesheet")
        c) to make a link to a script (rel="script")
        d) by stylesheets to control how collections of
           html nodes are rendered into printed documents
        e) to make a link to a printable version of this document
           e.g. a PostScript or PDF version (rel="alternate" media="print")
      </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attribute name="charset" type="html:Charset"/>
			<xs:attribute name="href" type="html:URI"/>
			<xs:attribute name="hreflang" type="html:LanguageCode"/>
			<xs:attribute name="type" type="html:ContentType"/>
			<xs:attribute name="rel" type="html:LinkTypes"/>
			<xs:attribute name="rev" type="html:LinkTypes"/>
			<xs:attribute name="media" type="html:MediaDesc"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="style">
		<xs:annotation>
			<xs:documentation>style info, which may include CDATA sections</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attribute name="id" type="xs:ID"/>
			<xs:attribute name="type" type="html:ContentType" use="required"/>
			<xs:attribute name="media" type="html:MediaDesc"/>
			<xs:attribute name="title" type="html:Text"/>
			<xs:attribute ref="xml:space" fixed="preserve"/>
		</xs:complexType>
	</xs:element-->
  <!--xs:element name="script">
		<xs:annotation>
			<xs:documentation>script statements, which may include CDATA sections</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attribute name="id" type="xs:ID"/>
			<xs:attribute name="charset" type="html:Charset"/>
			<xs:attribute name="type" type="html:ContentType" use="required"/>
			<xs:attribute name="src" type="html:URI"/>
			<xs:attribute name="defer">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="defer"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute ref="xml:space" fixed="preserve"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="noscript">
		<xs:annotation>
			<xs:documentation>alternate content container for non script-based rendering</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="html:Block">
					<xs:attributeGroup ref="html:attrs"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element-->
  <xs:annotation>
    <xs:documentation>=================== Document Body ====================================</xs:documentation>
  </xs:annotation>
  <xs:element name="body">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="html:Block">
          <xs:attributeGroup ref="html:attrs"/>
          <!--xs:attribute name="onload" type="html:Script"/>
					<xs:attribute name="onunload" type="html:Script"/-->
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="div">
    <xs:annotation>
      <xs:documentation>generic language/style container</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Paragraphs =======================================</xs:documentation>
  </xs:annotation>
  <xs:element name="p">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Headings ========================================= There are six levels of headings from h1 (the most important) to h6 (the least important).</xs:documentation>
  </xs:annotation>
  <xs:element name="h1">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h2">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h3">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h4">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h5">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="h6">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Lists ============================================</xs:documentation>
  </xs:annotation>
  <xs:element name="ul">
    <xs:annotation>
      <xs:documentation>Unordered list</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:li" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="ol">
    <xs:annotation>
      <xs:documentation>Ordered (numbered) list</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:li" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="li">
    <xs:annotation>
      <xs:documentation>list item</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>definition lists - dt for term, dd for its definition</xs:documentation>
  </xs:annotation>
  <xs:element name="dl">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="html:dt"/>
        <xs:element ref="html:dd"/>
      </xs:choice>
      <xs:attributeGroup ref="html:attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="dt">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="dd">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Address ==========================================</xs:documentation>
  </xs:annotation>
  <xs:element name="address">
    <xs:annotation>
      <xs:documentation>information on author</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Horizontal Rule ==================================</xs:documentation>
  </xs:annotation>
  <xs:element name="hr">
    <xs:complexType>
      <xs:attributeGroup ref="html:attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Preformatted Text ================================</xs:documentation>
  </xs:annotation>
  <xs:element name="pre">
    <xs:annotation>
      <xs:documentation>content is "Inline" excluding "img|object|big|small|sub|sup"</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:pre.content">
          <xs:attributeGroup ref="html:attrs"/>
          <!--xs:attribute ref="xml:space" fixed="preserve"/-->
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Block-like Quotes ================================</xs:documentation>
  </xs:annotation>
  <xs:element name="blockquote">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="html:Block">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="cite" type="html:URI"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>=================== Inserted/Deleted Text ============================ ins/del are allowed in block and inline content, but its inappropriate to include block content within an ins element occurring in inline content.</xs:documentation>
  </xs:annotation>
  <xs:element name="ins">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="cite" type="html:URI"/>
          <xs:attribute name="datetime" type="html:Datetime"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="del">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="cite" type="html:URI"/>
          <xs:attribute name="datetime" type="html:Datetime"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>================== The Anchor Element ================================</xs:documentation>
  </xs:annotation>
  <xs:element name="a">
    <xs:annotation>
      <xs:documentation>content is "Inline" except that anchors shouldn't be nested</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:a.content">
          <xs:attributeGroup ref="html:attrs"/>
          <!--xs:attributeGroup ref="html:focus"/-->
          <xs:attribute name="charset" type="html:Charset"/>
          <xs:attribute name="type" type="html:ContentType"/>
          <xs:attribute name="name" type="xs:NMTOKEN"/>
          <xs:attribute name="href" type="html:URI"/>
          <xs:attribute name="hreflang" type="html:LanguageCode"/>
          <xs:attribute name="rel" type="html:LinkTypes"/>
          <xs:attribute name="rev" type="html:LinkTypes"/>
          <!--xs:attribute name="shape" type="html:Shape" default="rect"/>
					<xs:attribute name="coords" type="html:Coords"/-->
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>===================== Inline Elements ================================</xs:documentation>
  </xs:annotation>
  <xs:element name="span">
    <xs:annotation>
      <xs:documentation>generic language/style container</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="bdo">
    <xs:annotation>
      <xs:documentation>I18N BiDi over-ride</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:coreattrs"/>
          <!--xs:attributeGroup ref="html:events"/-->
          <xs:attribute name="lang" type="html:LanguageCode"/>
          <!--xs:attribute ref="xml:lang"/-->
          <xs:attribute name="dir" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="ltr"/>
                <xs:enumeration value="rtl"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="br">
    <xs:annotation>
      <xs:documentation>forced line break</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="html:coreattrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="em">
    <xs:annotation>
      <xs:documentation>emphasis</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="strong">
    <xs:annotation>
      <xs:documentation>strong emphasis</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="dfn">
    <xs:annotation>
      <xs:documentation>definitional</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="code">
    <xs:annotation>
      <xs:documentation>program code</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="samp">
    <xs:annotation>
      <xs:documentation>sample</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="kbd">
    <xs:annotation>
      <xs:documentation>something user would type</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="var">
    <xs:annotation>
      <xs:documentation>variable</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="cite">
    <xs:annotation>
      <xs:documentation>citation</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="abbr">
    <xs:annotation>
      <xs:documentation>abbreviation</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="acronym">
    <xs:annotation>
      <xs:documentation>acronym</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="q">
    <xs:annotation>
      <xs:documentation>inlined quote</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="cite" type="html:URI"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="sub">
    <xs:annotation>
      <xs:documentation>subscript</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="sup">
    <xs:annotation>
      <xs:documentation>superscript</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="tt">
    <xs:annotation>
      <xs:documentation>fixed pitch font</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="i">
    <xs:annotation>
      <xs:documentation>italic font</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="b">
    <xs:annotation>
      <xs:documentation>bold font</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="big">
    <xs:annotation>
      <xs:documentation>bigger font</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="small">
    <xs:annotation>
      <xs:documentation>smaller font</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
	<xs:annotation>
		<xs:documentation>
      ==================== Object ======================================

      object is used to embed objects as part of HTML pages.
      param elements should precede other content. Parameters
      can also be expressed as attribute/value pairs on the
      object element itself when brevity is desired.
    </xs:documentation>
	</xs:annotation>
	<xs:element name="object">
		<xs:complexType mixed="true">
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="html:param"/>
				<xs:group ref="html:block"/>
				<xs:element ref="html:form"/>
				<xs:group ref="html:inline"/>
				<xs:group ref="html:misc"/>
			</xs:choice>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attribute name="declare">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="declare"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="classid" type="html:URI"/>
			<xs:attribute name="codebase" type="html:URI"/>
			<xs:attribute name="data" type="html:URI"/>
			<xs:attribute name="type" type="html:ContentType"/>
			<xs:attribute name="codetype" type="html:ContentType"/>
			<xs:attribute name="archive" type="html:UriList"/>
			<xs:attribute name="standby" type="html:Text"/>
			<xs:attribute name="height" type="html:Length"/>
			<xs:attribute name="width" type="html:Length"/>
			<xs:attribute name="usemap" type="html:URI"/>
			<xs:attribute name="name" type="xs:NMTOKEN"/>
			<xs:attribute name="tabindex" type="html:tabindexNumber"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="param">
		<xs:annotation>
			<xs:documentation>
       param is used to supply a named property value.
       In XML it would seem natural to follow RDF and support an
       abbreviated syntax where the param elements are replaced
       by attribute value pairs on the object start tag.
      </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="xs:ID"/>
			<xs:attribute name="name"/>
			<xs:attribute name="value"/>
			<xs:attribute name="valuetype" default="data">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="data"/>
						<xs:enumeration value="ref"/>
						<xs:enumeration value="object"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="type" type="html:ContentType"/>
		</xs:complexType>
	</xs:element>
	-->
  <xs:annotation>
    <xs:documentation>=================== Images =========================================== To avoid accessibility problems for people who aren't able to see the image, you should provide a text description using the alt and longdesc attributes. In addition, avoid the use of server-side image maps. Note that in this DTD there is no name attribute. That is only available in the transitional and frameset DTD.</xs:documentation>
  </xs:annotation>
  <xs:element name="img">
    <xs:complexType>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attribute name="src" type="html:URI" use="required"/>
      <xs:attribute name="alt" type="html:Text" use="required"/>
      <xs:attribute name="longdesc" type="html:URI"/>
      <xs:attribute name="height" type="html:Length"/>
      <xs:attribute name="width" type="html:Length"/>
      <!--xs:attribute name="usemap" type="html:URI">
				<xs:annotation>
					<xs:documentation>
            usemap points to a map element which may be in this document
            or an external document, although the latter is not widely supported
          </xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ismap">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="ismap"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute-->
    </xs:complexType>
  </xs:element>
  <!--
	<xs:annotation>
		<xs:documentation>
      ================== Client-side image maps ============================

      These can be placed in the same document or grouped in a
      separate document although this isn't yet widely supported
    </xs:documentation>
	</xs:annotation>
	<xs:element name="map">
		<xs:complexType>
			<xs:choice>
				<xs:choice maxOccurs="unbounded">
					<xs:group ref="html:block"/>
					<xs:element ref="html:form"/>
					<xs:group ref="html:misc"/>
				</xs:choice>
				<xs:element ref="html:area" maxOccurs="unbounded"/>
			</xs:choice>
			<xs:attributeGroup ref="html:i18n"/>
			<xs:attributeGroup ref="html:events"/>
			<xs:attribute name="id" type="xs:ID" use="required"/>
			<xs:attribute name="class"/>
			<xs:attribute name="style" type="html:StyleSheet"/>
			<xs:attribute name="title" type="html:Text"/>
			<xs:attribute name="name" type="xs:NMTOKEN"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="area">
		<xs:complexType>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attributeGroup ref="html:focus"/>
			<xs:attribute name="shape" type="html:Shape" default="rect"/>
			<xs:attribute name="coords" type="html:Coords"/>
			<xs:attribute name="href" type="html:URI"/>
			<xs:attribute name="nohref">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="nohref"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="alt" type="html:Text" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:annotation>
		<xs:documentation>
      ================ Forms ===============================================
    </xs:documentation>
	</xs:annotation>
	<xs:element name="form">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="html:form.content">
					<xs:attributeGroup ref="html:attrs"/>
					<xs:attribute name="action" type="html:URI" use="required"/>
					<xs:attribute name="method" default="get">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="get"/>
								<xs:enumeration value="post"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="enctype" type="html:ContentType" default="application/x-www-form-urlencoded"/>
					<xs:attribute name="onsubmit" type="html:Script"/>
					<xs:attribute name="onreset" type="html:Script"/>
					<xs:attribute name="accept" type="html:ContentTypes"/>
					<xs:attribute name="accept-charset" type="html:Charsets"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="label">
		<xs:annotation>
			<xs:documentation>
       Each label must not contain more than ONE field
       Label elements shouldn't be nested.
      </xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:complexContent mixed="true">
				<xs:extension base="html:Inline">
					<xs:attributeGroup ref="html:attrs"/>
					<xs:attribute name="for" type="xs:IDREF"/>
					<xs:attribute name="accesskey" type="html:Character"/>
					<xs:attribute name="onfocus" type="html:Script"/>
					<xs:attribute name="onblur" type="html:Script"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="InputType">
		<xs:restriction base="xs:token">
			<xs:enumeration value="text"/>
			<xs:enumeration value="password"/>
			<xs:enumeration value="checkbox"/>
			<xs:enumeration value="radio"/>
			<xs:enumeration value="submit"/>
			<xs:enumeration value="reset"/>
			<xs:enumeration value="file"/>
			<xs:enumeration value="hidden"/>
			<xs:enumeration value="image"/>
			<xs:enumeration value="button"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="input">
		<xs:annotation>
			<xs:documentation>form control</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attributeGroup ref="html:focus"/>
			<xs:attribute name="type" type="html:InputType" default="text"/>
			<xs:attribute name="name">
				<xs:annotation>
					<xs:documentation>the name attribute is required for all but submit &amp; reset</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="value"/>
			<xs:attribute name="checked">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="checked"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="disabled">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="disabled"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="readonly">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="readonly"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="size"/>
			<xs:attribute name="maxlength" type="html:Number"/>
			<xs:attribute name="src" type="html:URI"/>
			<xs:attribute name="alt"/>
			<xs:attribute name="usemap" type="html:URI"/>
			<xs:attribute name="onselect" type="html:Script"/>
			<xs:attribute name="onchange" type="html:Script"/>
			<xs:attribute name="accept" type="html:ContentTypes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="select">
		<xs:annotation>
			<xs:documentation>option selector</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element ref="html:optgroup"/>
				<xs:element ref="html:option"/>
			</xs:choice>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attribute name="name"/>
			<xs:attribute name="size" type="html:Number"/>
			<xs:attribute name="multiple">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="multiple"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="disabled">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="disabled"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="tabindex" type="html:tabindexNumber"/>
			<xs:attribute name="onfocus" type="html:Script"/>
			<xs:attribute name="onblur" type="html:Script"/>
			<xs:attribute name="onchange" type="html:Script"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="optgroup">
		<xs:annotation>
			<xs:documentation>option group</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="html:option" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attribute name="disabled">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="disabled"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="label" type="html:Text" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="option">
		<xs:annotation>
			<xs:documentation>selectable choice</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attribute name="selected">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="selected"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="disabled">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="disabled"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="label" type="html:Text"/>
			<xs:attribute name="value"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="textarea">
		<xs:annotation>
			<xs:documentation>multi-line text field</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="html:attrs"/>
			<xs:attributeGroup ref="html:focus"/>
			<xs:attribute name="name"/>
			<xs:attribute name="rows" type="html:Number" use="required"/>
			<xs:attribute name="cols" type="html:Number" use="required"/>
			<xs:attribute name="disabled">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="disabled"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="readonly">
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:enumeration value="readonly"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="onselect" type="html:Script"/>
			<xs:attribute name="onchange" type="html:Script"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="fieldset">
		<xs:annotation>
			<xs:documentation>
        The fieldset element is used to group form fields.
        Only one legend element should occur in the content
        and if present should only be preceded by whitespace.

        NOTE: this content model is different from the XHTML 1.0 DTD,
        closer to the intended content model in HTML4 DTD
      </xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:sequence>
				<xs:element ref="html:legend"/>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:group ref="html:block"/>
					<xs:element ref="html:form"/>
					<xs:group ref="html:inline"/>
					<xs:group ref="html:misc"/>
				</xs:choice>
			</xs:sequence>
			<xs:attributeGroup ref="html:attrs"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="legend">
		<xs:annotation>
			<xs:documentation>fieldset label</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:complexContent mixed="true">
				<xs:extension base="html:Inline">
					<xs:attributeGroup ref="html:attrs"/>
					<xs:attribute name="accesskey" type="html:Character"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="button">
		<xs:annotation>
			<xs:documentation>Content is "Flow" excluding a, form and form controls</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="true">
			<xs:complexContent mixed="true">
				<xs:extension base="html:button.content">
					<xs:attributeGroup ref="html:attrs"/>
					<xs:attributeGroup ref="html:focus"/>
					<xs:attribute name="name"/>
					<xs:attribute name="value"/>
					<xs:attribute name="type" default="submit">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="button"/>
								<xs:enumeration value="submit"/>
								<xs:enumeration value="reset"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="disabled">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="disabled"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
    -->
  <xs:annotation>
    <xs:documentation>======================= Tables ======================================= Derived from IETF HTML table standard, see [RFC1942]</xs:documentation>
  </xs:annotation>
  <xs:simpleType name="TFrame">
    <xs:annotation>
      <xs:documentation>The border attribute sets the thickness of the frame around the table. The default units are screen pixels. The frame attribute specifies which parts of the frame around the table should be rendered. The values are not the same as CALS to avoid a name clash with the valign attribute.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:enumeration value="void"/>
      <xs:enumeration value="above"/>
      <xs:enumeration value="below"/>
      <xs:enumeration value="hsides"/>
      <xs:enumeration value="lhs"/>
      <xs:enumeration value="rhs"/>
      <xs:enumeration value="vsides"/>
      <xs:enumeration value="box"/>
      <xs:enumeration value="border"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TRules">
    <xs:annotation>
      <xs:documentation>The rules attribute defines which rules to draw between cells: If rules is absent then assume: "none" if border is absent or border="0" otherwise "all"</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:enumeration value="none"/>
      <xs:enumeration value="groups"/>
      <xs:enumeration value="rows"/>
      <xs:enumeration value="cols"/>
      <xs:enumeration value="all"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="cellhalign">
    <xs:annotation>
      <xs:documentation>horizontal alignment attributes for cell contents char alignment char, e.g. char=':' charoff offset for alignment char</xs:documentation>
    </xs:annotation>
    <xs:attribute name="align">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="left"/>
          <xs:enumeration value="center"/>
          <xs:enumeration value="right"/>
          <xs:enumeration value="justify"/>
          <xs:enumeration value="char"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="char" type="html:Character"/>
    <xs:attribute name="charoff" type="html:Length"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="cellvalign">
    <xs:annotation>
      <xs:documentation>vertical alignment attributes for cell contents</xs:documentation>
    </xs:annotation>
    <xs:attribute name="valign">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="top"/>
          <xs:enumeration value="middle"/>
          <xs:enumeration value="bottom"/>
          <xs:enumeration value="baseline"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="table">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:caption" minOccurs="0"/>
        <xs:choice>
          <xs:element ref="html:col" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="html:colgroup" minOccurs="0" maxOccurs="unbounded"/>
        </xs:choice>
        <xs:element ref="html:thead" minOccurs="0"/>
        <xs:element ref="html:tfoot" minOccurs="0"/>
        <xs:choice>
          <xs:element ref="html:tbody" maxOccurs="unbounded"/>
          <xs:element ref="html:tr" maxOccurs="unbounded"/>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attribute name="summary" type="html:Text"/>
      <xs:attribute name="width" type="html:Length"/>
      <xs:attribute name="border" type="html:Pixels"/>
      <xs:attribute name="frame" type="html:TFrame"/>
      <xs:attribute name="rules" type="html:TRules"/>
      <xs:attribute name="cellspacing" type="html:Length"/>
      <xs:attribute name="cellpadding" type="html:Length"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="caption">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Inline">
          <xs:attributeGroup ref="html:attrs"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:annotation>
    <xs:documentation>Use thead to duplicate headers when breaking table across page boundaries, or for static headers when tbody sections are rendered in scrolling panel. Use tfoot to duplicate footers when breaking table across page boundaries, or for static footers when tbody sections are rendered in scrolling panel. Use multiple tbody sections when rules are needed between groups of table rows.</xs:documentation>
  </xs:annotation>
  <xs:element name="thead">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:tr" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tfoot">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:tr" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tbody">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:tr" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="colgroup">
    <xs:annotation>
      <xs:documentation>colgroup groups a set of col elements. It allows you to group several semantically related columns together.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="html:col" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attribute name="span" type="html:Number" default="1"/>
      <xs:attribute name="width" type="html:MultiLength"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="col">
    <xs:annotation>
      <xs:documentation>col elements define the alignment properties for cells in one or more columns. The width attribute specifies the width of the columns, e.g. width=64 width in screen pixels width=0.5* relative width of 0.5 The span attribute causes the attributes of one col element to apply to more than one column.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attribute name="span" type="html:Number" default="1"/>
      <xs:attribute name="width" type="html:MultiLength"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tr">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="html:th"/>
        <xs:element ref="html:td"/>
      </xs:choice>
      <xs:attributeGroup ref="html:attrs"/>
      <xs:attributeGroup ref="html:cellhalign"/>
      <xs:attributeGroup ref="html:cellvalign"/>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="Scope">
    <xs:annotation>
      <xs:documentation>Scope is simpler than headers attribute for common tables</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:enumeration value="row"/>
      <xs:enumeration value="col"/>
      <xs:enumeration value="rowgroup"/>
      <xs:enumeration value="colgroup"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:annotation>
    <xs:documentation>th is for headers, td for data and for cells acting as both</xs:documentation>
  </xs:annotation>
  <xs:element name="th">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="abbr" type="html:Text"/>
          <xs:attribute name="axis"/>
          <xs:attribute name="headers" type="xs:IDREFS"/>
          <xs:attribute name="scope" type="html:Scope"/>
          <xs:attribute name="rowspan" type="html:Number" default="1"/>
          <xs:attribute name="colspan" type="html:Number" default="1"/>
          <xs:attributeGroup ref="html:cellhalign"/>
          <xs:attributeGroup ref="html:cellvalign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="td">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="html:Flow">
          <xs:attributeGroup ref="html:attrs"/>
          <xs:attribute name="abbr" type="html:Text"/>
          <xs:attribute name="axis"/>
          <xs:attribute name="headers" type="xs:IDREFS"/>
          <xs:attribute name="scope" type="html:Scope"/>
          <xs:attribute name="rowspan" type="html:Number" default="1"/>
          <xs:attribute name="colspan" type="html:Number" default="1"/>
          <xs:attributeGroup ref="html:cellhalign"/>
          <xs:attributeGroup ref="html:cellvalign"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
</xs:schema>