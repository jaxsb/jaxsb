<!--
  Copyright (c) 2006 JAX-SB

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  You should have received a copy of The MIT License (MIT) along with this
  program. If not, see <http://opensource.org/licenses/MIT/>.
-->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.jaxsb</groupId>
    <artifactId>jaxsb</artifactId>
    <version>2.2.0</version>
  </parent>
  <artifactId>generator</artifactId>
  <name>JAX-SB Generator</name>
  <description>
    The JAX-SB Generator is a comprehensive framework to facilitate the use of XML in software languages such as Java. This framework
    intends to provide tools that will allow a developer to easily integrate XML interoperability, bind XML Schemas,
    and analyze XML Schemas for use with any software. Currently there is only one language and one application
    that is supported: XML Binding in Java. Next on the agenda is the development of analysis tools for XML Schema Documents.
    For instance, imagine a tool that will allow you to determine whether an XSD complies to best-practices. This tool
    will: 1) produce warnings for structures that do not comply to best-practices, 2) tell the developer whether the logical
    structure can be transformed linearly to a form that complies to best-practices, and 3) to automatically produce an XSD
    that maintains the logical structure of the original document but now fully complies to best-practices. This is just one of many
    tools that will be available shortly. In the meantime, check out the binding application.
  </description>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>false</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>com.google.googlejavaformat</groupId>
      <artifactId>google-java-format</artifactId>
      <version>1.7</version> <!-- All versions higher than 1.7 don't compile for jdk8 -->
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>32.1.2-jre</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>failureaccess</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>listenablefuture</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.checkerframework</groupId>
          <artifactId>checker-qual</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.errorprone</groupId>
          <artifactId>error_prone_annotations</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.j2objc</groupId>
          <artifactId>j2objc-annotations</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>animal-sniffer-annotations</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.libj</groupId>
      <artifactId>io</artifactId>
      <version>0.7.8</version>
    </dependency>
    <dependency>
      <groupId>org.libj</groupId>
      <artifactId>jci</artifactId>
      <version>0.8.6</version>
    </dependency>
    <dependency>
      <groupId>org.jaxsb</groupId>
      <artifactId>runtime</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>
</project>